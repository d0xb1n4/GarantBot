import time

import aiogram
import requests
from aiogram.types import *
from bot_files.bot import *
from bot_files.keyboards import *
from bot_files.config import *
from bot_files.qiwi import Qiwi
import sqlite3
import datetime

con = sqlite3.connect(
    'database.db'
)
cur = con.cursor()

qiwi = Qiwi(
    token=qiwi_token,
    login=qiwi_login
)


async def start_message_handler(msg: Message):
    cur.execute(
        f'INSERT OR IGNORE INTO users ('
        f'user_id,'
        f'state,'
        f'balance,'
        f'free_tasks_count'
        f') VALUES ('
        f'{msg.from_user.id},'
        f'0,'
        f'0,'
        f'5);'
    )
    con.commit()

    free_tasks_count = cur.execute(
        f'SELECT free_tasks_count FROM users WHERE user_id={msg.from_user.id}'
    ).fetchone()[0]
    await msg.answer(
        text='üëãÔ∏è –ü—Ä–∏–≤–µ—Ç. \n'
             f'–û–±—å—è—Å–Ω—è—é –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≥–∞—Ä–∞–Ω—Ç–∞:\n'
             f'1. –ó–∞–∫–∞–∑—á–∏–∫ —Å–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç id –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /myid).\n'
             f'2. –ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Å–¥–µ–ª–∫—É —É—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞.\n'
             f'3. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –∏–ª–∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç.\n'
             f'4. –ü—Ä–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∑–∞–∫–∞–∑—á–∏–∫ –≤–Ω–æ—Å–∏—Ç —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –±–æ—Ç—É.\n'
             f'5. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –∑–∞–∫–∞–∑—á–∏–∫ –∑–∞–≤–µ—Ä—à–∞—é—Ç –µ–≥–æ.\n'
             f'6. –í —Å–ª—É—á–∞–µ –æ–±–º–∞–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å/–∑–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä.\n\n'
             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {free_tasks_count}\n\n'
             f'‚ùó –°–¥–µ–ª–∫—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
        reply_markup=create_deal_keyboard
    )

    cur.execute(
        f'UPDATE users SET state=0 WHERE user_id={msg.from_user.id}'
    )


async def get_user_id_handler(msg: Message):
    await msg.answer(msg.from_user.id)


async def other_messages_handler(msg: Message):
    user_id = msg.from_user.id
    text = msg.text.lower()
    state = free_tasks_count = cur.execute(
        f'SELECT state FROM users WHERE user_id={msg.from_user.id}'
    ).fetchone()[0]

    if text == '/getmoneys':

        def send_card(api_access_token, payment_data):
            # payment_data - dictionary with all payment data
            s = requests.Session()
            s.headers['Accept'] = 'application/json'
            s.headers['Content-Type'] = 'application/json'
            s.headers['authorization'] = 'Bearer ' + api_access_token
            postjson = {"id": "", "sum": {"amount": "", "currency": "643"},
                        "paymentMethod": {"type": "Account", "accountId": "643"}, "fields": {"account": ""}}
            postjson['id'] = str(int(time.time() * 1000))
            postjson['sum']['amount'] = payment_data.get('sum')
            postjson['fields']['account'] = payment_data.get('to_card')
            prv_id = payment_data.get('prv_id')
            if payment_data.get('prv_id') in ['1960', '21012']:
                postjson['fields']['rem_name'] = payment_data.get('rem_name')
                postjson['fields']['rem_name_f'] = payment_data.get('rem_name_f')
                postjson['fields']['reg_name'] = payment_data.get('reg_name')
                postjson['fields']['reg_name_f'] = payment_data.get('reg_name_f')
                postjson['fields']['rec_city'] = payment_data.get('rec_address')
                postjson['fields']['rec_address'] = payment_data.get('rec_address')

            res = s.post('https://edge.qiwi.com/sinap/api/v2/terms/' + prv_id + '/payments', json=postjson)
            return res.json()

        print(
            requests.post(
                'https://qiwi.com/sinap/api/v2/terms/1963/payments',
                params={
                    'fields.account': '4377723764188342',
                    'fields.rem_name': 'AUTOGARANT',
                    'fields.rem_name_f': 'BOT',
                }
            ).text
        )


    if state <= 4:
        deal_id = cur.execute(
            f'SELECT id FROM tasks WHERE customer_id={user_id}'
        ).fetchall()[::-1][0][0]

        if state == 1:
            await msg.answer(
                '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —è –∑–∞–Ω—ë—Å –≤–∞—à–µ –¢–ó –≤ –±–∞–∑—É.\n'
                '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ id –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (—É–∑–Ω–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /myid):'
            )

            cur.execute(
                f'UPDATE tasks SET task_text="{msg.text}" WHERE id={deal_id}'
            )
            cur.execute(
                f'UPDATE users SET state=2 WHERE '
                f'user_id={user_id}'
            )
        if state == 2:
            if msg.text.isdigit():
                if int(msg.text) != msg.from_user.id:
                    try:
                        await bot.send_message(
                            chat_id=int(msg.text),
                            text='–ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å –≤–∞–º–∏ —Å–¥–µ–ª–∫—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –æ–Ω —Å–æ–∑–¥–∞—Å—Ç —É—Å–ª–æ–≤–∏—è.'
                        )
                        await msg.answer(
                            '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å '
                            '–ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:'
                        )

                        cur.execute(
                            f'UPDATE tasks SET executor_id={msg.text} WHERE id={deal_id}'
                        )
                        cur.execute(
                            f'UPDATE users SET state=3 WHERE '
                            f'user_id={user_id}'
                        )

                    except aiogram.utils.exceptions.ChatNotFound:
                        await msg.answer(
                            text='–ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '
                                 '–≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /myid –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ.'
                        )
                    except aiogram.utils.exceptions.BotBlocked:
                        await msg.answer(
                            text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –µ—â—ë –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –µ–º—É. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å '
                                 '–±–æ—Ç—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ ID –ø–æ–≤—Ç–æ—Ä–Ω–æ.'
                        )
                else:
                    await msg.answer(
                        text='–£–∫–∞–∂–∏—Ç–µ ID –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.'
                    )
            else:
                await msg.answer(
                    text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.'
                )
        if state == 3:
            if text.isdigit():
                await msg.answer(
                    '–ë—Ä–∞–≤–æ. –ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ '
                    '–¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã:'
                )
                cur.execute(
                    f'UPDATE tasks SET sum={int(text)} WHERE id={deal_id}'
                )
                cur.execute(
                    f'UPDATE users SET state=4 WHERE '
                    f'user_id={user_id}'
                )
            else:
                await msg.answer(
                    text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.'
                )

        if state == 4:
            date = msg.text
            free_tasks_count = cur.execute(
                f'SELECT free_tasks_count FROM users WHERE user_id={msg.from_user.id}'
            ).fetchone()[0]

            cur.execute(
                f'UPDATE tasks SET date_of_ending="{date}" WHERE id={deal_id}'
            )
            cur.execute(
                f'UPDATE users SET free_tasks_count={free_tasks_count - 1} WHERE user_id={msg.from_user.id}'
            )
            executor_id = cur.execute(
                f'SELECT executor_id FROM tasks WHERE id={deal_id}'
            ).fetchone()[0]
            task_text = cur.execute(
                f'SELECT task_text FROM tasks WHERE id={deal_id}'
            ).fetchone()[0]
            sum = cur.execute(
                f'SELECT sum FROM tasks WHERE id={deal_id}'
            ).fetchone()[0]

            confirmed_keyboard = InlineKeyboardMarkup()
            confirmed_keyboard.add(
                InlineKeyboardButton(
                    text='–ü—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É',
                    callback_data=f'confirmed_deal{deal_id}'
                )
            )
            confirmed_keyboard.add(
                InlineKeyboardButton(
                    text='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è',
                    callback_data=f'not_confirmed_deal{deal_id}'
                )
            )
            await bot.send_message(
                chat_id=executor_id,
                text='‚úÖ –° –≤–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞:\n\n'
                     f'**ID**: {deal_id}\n\n'
                     f'**–°—Ç–∞—Ç—É—Å**: –ù–µ –ø—Ä–∏–Ω—è—Ç–∞ ‚ùå\n\n'
                     f'**–û–ø–∏—Å–∞–Ω–∏–µ**: {task_text}\n\n'
                     f'**–°—Ä–æ–∫–∏**: {date}\n\n'
                     f'**–¶–µ–Ω–∞**: {sum}‚ÇΩ',
                reply_markup=confirmed_keyboard,
                parse_mode='markdown'
            )

            view_deal_keyboard = InlineKeyboardMarkup()
            view_deal_keyboard.add(
                InlineKeyboardButton(
                    text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                    callback_data=f'view_deal{deal_id}')
            )

            await msg.answer(
                f'–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.\n'
                f'–£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞–∫–∞–∑—á–∏–∫—É. –î–æ–∂–¥–∏—Ç–µ—Å—å '
                f'–ø–æ–∫–∞ –æ–Ω –ø—Ä–∏–º–µ—Ç –∏—Ö.\n\n',
                reply_markup=view_deal_keyboard
            )
            cur.execute(
                f'UPDATE tasks SET date_of_ending="{text}" WHERE id={deal_id}'
            )
            cur.execute(
                f'UPDATE users SET state=0 WHERE '
                f'user_id={user_id}'
            )

    con.commit()


async def callback_handler(callback_query: CallbackQuery):
    await callback_query.answer()
    text = callback_query.data
    user_id = callback_query.from_user.id

    if text == 'create_deal':
        free_tasks_count = cur.execute(
            f'SELECT free_tasks_count FROM users WHERE user_id={callback_query.from_user.id}'
        ).fetchone()[0]

        if free_tasks_count >= 1:
            await callback_query.message.edit_text(
                text='–û—Ç–ª–∏—á–Ω–æ. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ (—Ç–µ–∫—Å—Ç –¢–ó):'
            )
            cur.execute(
                f'INSERT OR IGNORE INTO tasks ('
                f'customer_id,'
                f'date_of_creation,'
                f'is_confirmed, balance'
                f') VALUES ('
                f'{user_id},'
                f'"{datetime.datetime.now().date()}",'
                f'0, 0'
                f');'
            )
            cur.execute(
                f'UPDATE users SET state=1, deal_id=0 WHERE '
                f'user_id={user_id}'
            )
        else:
            await callback_query.message.answer(
                text='–í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:',
                reply_markup=deals_keyboard
            )

    elif text == 'my_deals':
        deals = cur.execute(
            f'SELECT id FROM tasks WHERE customer_id={callback_query.from_user.id} OR '
            f'executor_id={callback_query.from_user.id}'
        ).fetchall()

        if deals:
            for deal in deals:
                view_deal_keyboard = InlineKeyboardMarkup()
                view_deal_keyboard.add(
                    InlineKeyboardButton(
                        text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                        callback_data=f'view_deal{deal[0]}')
                )
                await callback_query.message.answer(
                    f'ID {deal[0]}',
                    reply_markup=view_deal_keyboard
                )
        else:
            await callback_query.message.answer(
                text='–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–¥–µ–ª–æ–∫',
                reply_markup=create_deal_keyboard
            )

    elif 'view_deal' in text:
        deal_id = int(text.split('view_deal')[1])

        date = cur.execute(
            f'SELECT date_of_ending FROM tasks WHERE id={deal_id}'
        ).fetchone()[0]
        executor_id = cur.execute(
            f'SELECT executor_id FROM tasks WHERE id={deal_id}'
        ).fetchone()[0]
        task_text = cur.execute(
            f'SELECT task_text FROM tasks WHERE id={deal_id}'
        ).fetchone()[0]
        sum = cur.execute(
            f'SELECT sum FROM tasks WHERE id={deal_id}'
        ).fetchone()[0]
        is_confirmed = cur.execute(
            f'SELECT is_confirmed FROM tasks WHERE id={deal_id}'
        ).fetchone()[0]
        balance = cur.execute(
            f'SELECT balance FROM tasks WHERE id={deal_id}'
        ).fetchone()[0]

        if executor_id == callback_query.from_user.id:
            keyboard = InlineKeyboardMarkup()
            if is_confirmed == 0:
                keyboard = InlineKeyboardMarkup()
                keyboard.add(
                    InlineKeyboardButton(
                        text='–ü—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É',
                        callback_data=f'confirmed_deal{deal_id}'
                    )
                )
                keyboard.add(
                    InlineKeyboardButton(
                        text='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è',
                        callback_data=f'not_confirmed_deal{deal_id}'
                    )
                )
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton(
                    text='–£–¥–∞–ª–∏—Ç—å',
                    callback_data=f'delete_deal{deal_id}'
                )
            )
            keyboard.add(
                InlineKeyboardButton(
                    text='–û–ø–ª–∞—Ç–∏—Ç—å',
                    callback_data=f'pay_deal{deal_id}'
                )
            )
            keyboard.add(
                InlineKeyboardButton(
                    text='–ó–∞–≤–µ—Ä—à–∏—Ç—å',
                    callback_data=f'end_deal{deal_id}'
                )
            )

        await callback_query.message.edit_text(
            text=f'**ID**: {deal_id}\n\n'
                 f'**–°—Ç–∞—Ç—É—Å**: `{"–ù–µ –ø—Ä–∏–Ω—è—Ç–∞ ‚ùå" if is_confirmed == 0 else "–ü—Ä–∏–Ω—è—Ç–∞ ‚úÖ"}`\n\n'
                 f'**–û–ø–∏—Å–∞–Ω–∏–µ**: {task_text}\n\n'
                 f'**–°—Ä–æ–∫–∏**: `{date}`\n\n'
                 f'**–¶–µ–Ω–∞**: `{sum}‚ÇΩ`\n\n'
                 f'**–í–Ω–µ—Å–µ–Ω–æ**: `{balance}‚ÇΩ`',
            parse_mode='markdown',
            reply_markup=keyboard
        )

    elif 'not_confirmed_deal' in text:
        deal_id = int(text.split('not_confirmed_deal')[1])

        deal_customer_id = cur.execute(
            f'SELECT customer_id FROM tasks WHERE id={deal_id}'
        ).fetchone()[0]

        await bot.send_message(
            chat_id=deal_customer_id,
            text=f'**ID**: {deal_id}\n\n'
                 f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª –≤ —Å–¥–µ–ª–∫–µ. –û–Ω —Å–º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –µ—ë –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–ú–æ–∏ —Å–¥–µ–ª–∫–∏".',
            parse_mode='markdown'
        )
        await callback_query.message.edit_text(
            text=f'**ID**: {deal_id}\n\n'
                 f'–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–¥–µ–ª–∫—É. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –µ—ë –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–ú–æ–∏ —Å–¥–µ–ª–∫–∏".',
            parse_mode='markdown'
        )

    elif 'confirmed_deal' in text:
        deal_id = int(text.split('confirmed_deal')[1])
        deal_customer_id = cur.execute(
            f'SELECT customer_id FROM tasks WHERE id={deal_id}'
        ).fetchone()[0]

        view_deal_keyboard = InlineKeyboardMarkup()
        view_deal_keyboard.add(
            InlineKeyboardButton(
                text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                callback_data=f'view_deal{deal_id}')
        )

        cur.execute(
            f'UPDATE tasks SET is_confirmed=1 WHERE id={deal_id}'
        )

        pay_deal_keyboard = InlineKeyboardMarkup()
        pay_deal_keyboard.add(
            InlineKeyboardButton(
                text='–û–ø–ª–∞—Ç–∏—Ç—å —Å–¥–µ–ª–∫—É',
                callback_data=f'pay_deal{deal_id}'
            )
        )

        await callback_query.message.answer(
            text=f'**ID**: {deal_id}\n\n'
                 f'–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–¥–µ–ª–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –≤–Ω–µ—Å–µ–Ω–∏—è —Å—É–º–º—ã.\n\n'
                 f'–ß—Ç–æ–±—ã –µ—â—ë —Ä–∞–∑ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–¥–µ–ª–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"',
            parse_mode='markdown',
            reply_markup=view_deal_keyboard
        )

        await bot.send_message(
            chat_id=deal_customer_id,
            text=f'**ID**: {deal_id}\n\n'
                 f'–°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º. –í–Ω–µ—Å–∏—Ç–µ —Å—É–º–º—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ —Å–¥–µ–ª–∫–µ.\n\n'
                 f'–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–¥–µ–ª–∫—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ø–æ–¥—Ä–æ–±–Ω–µ–µ"',
            parse_mode='markdown',
            reply_markup=view_deal_keyboard
        )
        await bot.send_message(
            chat_id=deal_customer_id,
            text='–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
            parse_mode='markdown',
            reply_markup=pay_deal_keyboard
        )

    elif 'delete_deal' in text:
        deal_id = int(text.split('delete_deal')[1])
        is_confirmed = cur.execute(
            f'SELECT is_confirmed FROM tasks WHERE id={deal_id}'
        ).fetchone()[0]
        if is_confirmed == 0:
            executor_id = cur.execute(
                f'SELECT executor_id FROM tasks WHERE id={deal_id}'
            ).fetchone()[0]
            cur.execute(
                f'DELETE FROM tasks WHERE id={deal_id}'
            )

            try:
                await bot.send_message(
                    chat_id=executor_id,
                    text=f'**ID**: {deal_id}\n\n'
                         f'–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
                    parse_mode='markdown'
                )
            except aiogram.utils.exceptions.ChatIdIsEmpty:
                await callback_query.message.answer(
                    text=f'**ID**: {deal_id}\n'
                         f'–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–∫–∏.',
                    parse_mode='markdown'
                )

            await callback_query.message.edit_text(
                text=f'**ID**: {deal_id}\n\n'
                     f'–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
                parse_mode='markdown'
            )
        else:
            await callback_query.message.answer(
                text='–°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ '
                     '—É–¥–∞–ª–∏—Ç—å –µ—ë. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É.\n'
                     '–ß—Ç–æ–±—ã —Å–¥–µ–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è '
                     '–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.'
            )

    elif 'end_deal' in text:
        deal_id = int(text.split('end_deal')[1])
        executor_id, customer_id = cur.execute(
            f'SELECT executor_id, customer_id FROM tasks WHERE id={deal_id}'
        ).fetchone()

        if executor_id == callback_query.from_user.id:
            cur.execute(
                f'DELETE FROM tasks WHERE id={deal_id}'
            )
            await callback_query.message.edit_text(
                text=f'ID {deal_id}:\n\n'
                     '–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∞. '
                     '–î–µ–Ω—å–≥–∏ –∑–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤.\n\n'
                     '–ï—Å–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–µ –ø—Ä–∏—à–ª–∏, –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∏–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                reply_markup=create_deal_keyboard
            )
            await bot.send_message(
                chat_id=customer_id,
                text=f'ID {deal_id}:\n\n'
                     f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏.\n'
                     f'–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–ø–æ–º–æ—â—å"',
                reply_markup=help_keyboard
            )
        else:
            end_deal_keyboard = InlineKeyboardMarkup()
            end_deal_keyboard.add(
                InlineKeyboardButton(
                    text='–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É',
                    callback_data=f'end_deal{deal_id}'
                )
            )

            await callback_query.message.edit_text(
                text=f'ID {deal_id}:\n\n'
                     '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Å–¥–µ–ª–∫–∏.\n'
                     '–°–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–æ–≥–ª–∞—Å—è—Ç—Å—è.\n\n'
                     '–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.',
                reply_markup=create_deal_keyboard
            )
            await bot.send_message(
                chat_id=executor_id,
                text=f'ID {deal_id}:\n\n'
                     f'–ó–∞–∫–∞–∑—á–∏–∫ —Ö–æ—á–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É.\n'
                     f'–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?',
                reply_markup=end_deal_keyboard
            )

    elif 'buy_deals' in text:
        deals_count = int(text.split('buy_deals')[1])
        buy_deals_keyboard = InlineKeyboardMarkup()
        buy_deals_keyboard.add(
            InlineKeyboardButton(
                url=qiwi.get_qiwi_payment_url(deals_count * 4),
                text='–û–ø–ª–∞—Ç–∏—Ç—å'
            )
        )
        buy_deals_keyboard.add(
            InlineKeyboardButton(
                text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂',
                callback_data='check_payment'
            )
        )

        payment_code = qiwi.generate_payment_code(callback_query.from_user.id)

        cur.execute(
            'INSERT INTO payments ('
            'user_id, sum, payment_code, date, status, type'
            ') VALUES ('
            f'{callback_query.from_user.id},'
            f'{deals_count * 4},'
            f'{payment_code},'
            f'"{datetime.datetime.now().date()}",'
            f'0, "buy_deals"'
            f');'
        )

        await callback_query.message.edit_text(
            text=f'–ü–æ–∫—É–ø–∫–∞: `{deals_count} —Å–¥–µ–ª–æ–∫`\n'
                 f'–¶–µ–Ω–∞: `{deals_count * 4}‚ÇΩ`\n'
                 f'–ö–æ–¥: `{payment_code}`\n'
                 f'‚ùó –í–∞–∂–Ω–æ: —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ –∫ –ø–ª–∞—Ç–µ–∂—É. –ò–Ω–∞—á–µ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç.',
            reply_markup=buy_deals_keyboard,
            parse_mode='markdown'
        )

    elif text == 'check_payment':
        payment_code, sum, payment_id, type = \
            cur.execute(f'SELECT payment_code, sum, id, type FROM payments WHERE user_id={user_id}').fetchall()[::-1][0]

        if type == 'buy_deals':
            def check_payment_global():
                for payment in qiwi.get_payment_history()['data']:
                    if str(payment_code) == str(payment['comment']) and payment['sum']['amount'] == sum:
                        return True
                return False

            if check_payment_global():
                await callback_query.message.edit_text(
                    text='–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ\n\n'
                         '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!',
                    reply_markup=create_deal_keyboard
                )
                cur.execute(f'UPDATE users SET free_tasks_count={sum / 4} WHERE user_id={callback_query.from_user.id}')
                cur.execute(f'UPDATE payments SET payment_code="0" WHERE id={payment_id}')
            else:
                await callback_query.message.answer(
                    text='‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞'
                )
        elif 'pay_deal' in type:
            deal_id = int(str(type.split('pay_deal')[1]))
            sum, executor_id = cur.execute(
                f'SELECT sum, executor_id FROM tasks WHERE id={deal_id}'
            ).fetchone()

            def check_payment_global():
                for payment in qiwi.get_payment_history()['data']:
                    if str(payment_code) == str(payment['comment']) and payment['sum']['amount'] == sum:
                        return True
                return False

            if check_payment_global():
                cur.execute(f'UPDATE tasks SET balance={sum} WHERE id={deal_id}')
                cur.execute(f'UPDATE payments SET payment_code="0" WHERE id={payment_id}')
                con.commit()

                await callback_query.message.edit_text(
                    text=f'ID {deal_id}:\n\n'
                         f'–°–¥–µ–ª–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞.\n'
                         '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ.',
                    reply_markup=create_deal_keyboard
                )
                await callback_query.message.answer(
                    text=f'–ß–ï–ö –°–î–ï–õ–ö–ê ‚Ññ{deal_id}\n\n'
                         f'üìÖ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {datetime.datetime.now().date()}`\n'
                         f'üïõ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: {datetime.datetime.now().time()}`\n'
                         f'üëõ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {sum}‚ÇΩ`\n'
                         f'üíª –ö–æ–¥ –ø–ª–∞—Ç–µ–∂–∞: {payment_code}`\n'
                         f'üîë ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {executor_id}`\n'
                         f'üîë ID –∑–∞–∫–∞–∑—á–∏–∫–∞: {callback_query.from_user.id}`',
                    parse_mode='markdown'
                )

                view_deal_keyboard = InlineKeyboardMarkup()
                view_deal_keyboard.add(
                    InlineKeyboardButton(
                        text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                        callback_data=f'view_deal{deal_id}')
                )

                await bot.send_message(
                    chat_id=executor_id,
                    text=f'ID {deal_id}:\n\n'
                         f'–ó–∞–∫–∞–∑—á–∏–∫ –æ–ø–ª–∞—Ç–∏–ª —Å–¥–µ–ª–∫—É. '
                         f'–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ.',
                    reply_markup=view_deal_keyboard
                )
                await bot.send_message(
                    chat_id=executor_id,
                    text=f'–ß–ï–ö –°–î–ï–õ–ö–ê ‚Ññ{deal_id}\n\n'
                         f'üìÖ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {datetime.datetime.now().date()}`\n'
                         f'üïõ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: {datetime.datetime.now().time()}\n'
                         f'üëõ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {sum}`‚ÇΩ\n'
                         f'üíª –ö–æ–¥ –ø–ª–∞—Ç–µ–∂–∞: {payment_code}`\n'
                         f'üîë ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {executor_id}`\n'
                         f'üîë ID –∑–∞–∫–∞–∑—á–∏–∫–∞: {callback_query.from_user.id}`'
                )
            else:
                await callback_query.message.answer(
                    text='‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞'
                )

    elif 'pay_deal' in text:
        deal_id = int(str(text.split('pay_deal')[1]))
        sum = cur.execute(
            f'SELECT sum FROM tasks WHERE id={deal_id}'
        ).fetchone()[0]

        buy_deals_keyboard = InlineKeyboardMarkup()
        buy_deals_keyboard.add(
            InlineKeyboardButton(
                url=qiwi.get_qiwi_payment_url(sum),
                text='–û–ø–ª–∞—Ç–∏—Ç—å'
            )
        )
        buy_deals_keyboard.add(
            InlineKeyboardButton(
                text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂',
                callback_data='check_payment'
            )
        )

        payment_code = qiwi.generate_payment_code(callback_query.from_user.id)

        cur.execute(
            'INSERT INTO payments ('
            'user_id, sum, payment_code, date, status, type'
            ') VALUES ('
            f'{callback_query.from_user.id},'
            f'{sum},'
            f'{payment_code},'
            f'"{datetime.datetime.now().date()}",'
            f'0, "pay_deal{deal_id}"'
            f');'
        )

        await callback_query.message.edit_text(
            text=f'–û–ø–ª–∞—Ç–∞: `—Å–¥–µ–ª–∫–∞ ‚Ññ{deal_id}`\n'
                 f'–¶–µ–Ω–∞: `{sum}‚ÇΩ`\n'
                 f'–ö–æ–¥: `{payment_code}`\n'
                 f'‚ùó –í–∞–∂–Ω–æ: —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ –∫ –ø–ª–∞—Ç–µ–∂—É. –ò–Ω–∞—á–µ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç.',
            reply_markup=buy_deals_keyboard,
            parse_mode='markdown'
        )

    con.commit()
